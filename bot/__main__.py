import asyncio
import os
import logging
import hashlib
import random
import sys

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineQuery, InputTextMessageContent, InlineQueryResultArticle, InlineKeyboardButton, \
    InlineKeyboardMarkup

from bot import setup, schedule, sms_module, call_module

API_TOKEN = os.getenv('API_TOKEN')

CHAT_IDs = [-1001420903302, 551675002]

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

commands = {
    '–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è': {'!–ø—Ä–∏–≤–µ—Ç', '!–ü—Ä–∏–≤–µ—Ç', '!–ø—Ä–∏–≤—ñ—Ç', '!–ü—Ä–∏–≤—ñ—Ç'},
    '–•—É–µ—Ç–∞': {'!—Ö—É–µ—Ç–∞', '!–•—É–µ—Ç–∞', '–•—É–µ—Ç–∞', '—Ö—É–µ—Ç–∞', '—è—Å–Ω–æ', '–Ø—Å–Ω–æ', '—Ö—É–∏—Ç–∞'},
    '–ú–ú–ú–ú': {'–º–º–º', '–º–º–º–º', '–º–º–º–º–º', '–ú–º–º', '–ú–º–º–º', '–ú–º–º–º' '–ú–º–º–º–º', '–ú–ú–ú', '–ú–ú–ú–ú–ú', '–ú–ú–ú–ú', '–º–º–º–º–º–º', '–º–º–º–º–º–º–º',
             '–ú–º–º–º–º–º–º'},
    '–°–û–°–ê–¢–¨': {
        '!–ò–ù', '!–∏–Ω', '!–Ü–ù', '!—ñ–Ω', '–ò–ù', '–ò–Ω', '–∏–Ω', '–Ü–ù', '—ñ–Ω', '–ò–ù-01', '–∏–Ω-01', '–°–ù–ê–£', '–°–Ω–∞—É', '—Å–Ω–∞—É',
    },
    '–ü–∞—Ä—ã': {'!–ü–∞—Ä—ã', '!–ø–∞—Ä—ã', '!–ø–∞—Ä–∏', '!–ü–∞—Ä–∏'},
    '–ë—É–ª—å': {'!–ë—É–ª—å', '!–±—É–ª—å'},
    '–®–∏–∑–∞': {'!–®–∏–∑–∞', '!—à–∏–∑–∞', '!–î–∏–Ω—å–¥–æ–Ω', '!–¥–∏–Ω—å–¥–æ–Ω'},
    '–ó–∞–≤—Ç—Ä–∞': {'–∑–∞–≤—Ç—Ä–∞', '–ó–∞–≤—Ç—Ä–∞'},
}


@dp.message(Command('me'))
async def me_command(message: types.Message):
    if message.chat.id in CHAT_IDs:
        await bot.delete_message(message_id=message.message_id, chat_id=message.chat.id)
        message_str = message.text
        message_str = message_str[3:]
        message_str = "<b>" + str(message.from_user.first_name) + message_str + "</b>"
        await message.answer(message_str)


@dp.message(Command('help'))
async def help_command(message: types.Message):
    if message.chat.id in CHAT_IDs:
        await message.answer(
            "<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö</b>\n\n" +
            "1. <i>!–ø–∞—Ä–∏ [–∞—Ä–≥—É–º–µ–Ω—Ç]</i> - —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤–∫–∞–Ω—É –¥–∞—Ç—É. –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏" +
            " <i>–∑–∞–≤—Ç—Ä–∞</i> –∞–±–æ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ 'dd.mm.yyyy'. –ü—É—Å—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ–≤–µ—Ä–Ω–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.\n" +
            "2. <i>/me</i> - –£ –Ω–∞—Å RP —Å–µ—Ä–≤–µ—Ä.\n" +
            "3. <i>/help</i> - –≤–∏–∫–ª–∏–∫–∞—î —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n" +
            "4. <i>/set_group [–Ω–∞–∑–≤–∞ –≥—Ä—É–ø–∏]</i> - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥—Ä—É–ø—É.\n" +
            "-----------\n" +
            "–î–ª—è –º–µ–Ω–µ —Å–ø—Ä–∞–≤–∫–∞, –±–æ –∑–∞–±—É–≤–∞—é —è–∫ –≤–æ–Ω–æ –ø—Ä–∞—Ü—é—î:\n" +
            "/add_user [ID] [–Ω–∞–∑–≤–∞ –≥—Ä—É–ø–∏] - –¥–æ–¥–∞—Ç–∏ –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n" +
            "/get_users - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n" +
            "/get_id - –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —é–∑–µ—Ä–∞.\n" +
            "/add_url [–Ω–∞–∑–≤–∞ –≥—Ä—É–ø–∏]|[–Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ]|[action(–ª–∞–±–∞/–ª–µ–∫—Ü—ñ—è)]|[–ø–æ—Å–∏–ª–∞–Ω–Ω—è] - –¥–æ–¥–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä—É.\n" +
            "/delete_url [–Ω–∞–∑–≤–∞ –≥—Ä—É–ø–∏]|[–Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ]|[action(–ª–∞–±–∞/–ª–µ–∫—Ü—ñ—è)]|[–ø–æ—Å–∏–ª–∞–Ω–Ω—è] - –≤–∏–¥–∞–ª—è—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä—É.\n" +
            "/get_urls - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ JSON –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏.\n" +
            "\n P.S. –í—Å–µ —â–æ –Ω–µ–¥–æ–ø–∏–ª–µ–Ω–µ, —Ç–∞–∫–∏–º —ñ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –≤ –ø–∞–º'—è—Ç–Ω–∏–∫ —Ç–æ–º—É, —è–∫—É –¥—ñ—á —è –ª—ñ–ø–∏–≤ –Ω–∞ –ø–µ—Ä—à–æ–º—É –∫—É—Ä—Å—ñ. ‚ò∫Ô∏è"
        )


@dp.message(Command('set_group'))
async def set_group(message: types.Message):
    if message.chat.id in CHAT_IDs:
        message_str = message.text
        message_array = list(map(str, message_str.split()))
        try:
            group_name = message_array[1]
        except:
            await message.reply("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏!")
            return 0

        if group_name not in schedule.groups:
            await message.reply("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏!")
            return 0

        if setup.setGroup(message.from_user.id, group_name) == "OK":
            await message.reply(f"–ì—Ä—É–ø–∞ <b>{group_name}</b> —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            await message.reply("–°—Ö–æ–∂–µ, —â–æ —è –≤–∞—Å —á–æ–º—É—Å—å –Ω–µ –∑–Ω–∞—é.")


@dp.message(Command('add_user'))
async def add_user(message: types.Message):
    if message.from_user.id in CHAT_IDs:
        message_str = message.text
        message_array = list(map(str, message_str.split()))
        try:
            user_id = message_array[1]
        except:
            await message.reply("–ü–∏—à–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –±–∏–¥–ª–æ.")
            return 0
        try:
            group_name = message_array[2]
        except:
            await message.reply("–ü–∏—à–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –±–∏–¥–ª–æ.")
            return 0

        group_name = group_name[:2] + group_name[3:]

        if setup.addUser(user_id, group_name) == "OK":
            await message.reply(f"–Æ–∑–µ—Ä <b>{user_id} | {group_name}</b> –¥–æ–¥–∞–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ")
        else:
            await message.reply("–í—ñ–Ω —Ç–∞–º —É–∂–µ —î, –±–∏–¥–ª–æ!")


@dp.message(Command('get_users'))
async def get_users(message: types.Message):
    if message.from_user.id in CHAT_IDs:
        users_list = setup.loadUsers()
        output = str()
        for user in users_list:
            output += f"{user[0]} | {user[1]}\n"

        await message.reply(output)


@dp.message(Command('get_id'))
async def get_id(message: types.Message):
    if message.from_user.id in CHAT_IDs:
        await message.reply(f"User ID is <b>{message.reply_to_message.from_user.id}</b>")


@dp.message(Command('add_url'))
async def addURL(message: types.Message):
    if message.from_user.id in CHAT_IDs:
        argsStr = message.get_args()
        argsArray = argsStr.split("|")
        groupCode = schedule.groups[argsArray[0]]
        response = setup.addUrl(groupCode, argsArray[1], argsArray[2], argsArray[3])
        if response == "OK":
            await message.reply("Added Successfully!")
        else:
            await message.reply(response)
    else:
        await message.reply("Only for Admins!")


@dp.message(Command('delete_url'))
async def deleteURL(message: types.Message):
    if message.from_user.id in CHAT_IDs:
        argsStr = message.get_args()
        argsArray = argsStr.split("|")
        groupCode = schedule.groups[argsArray[0]]
        response = setup.deleteURL(groupCode, argsArray[1], argsArray[2])
        if response == "OK":
            await message.reply("Deleted Successfully!")
        else:
            await message.reply(response)
    else:
        await message.reply("Only for Admins!")


@dp.message(Command('get_urls'))
async def getURLs(message: types.Message):
    if message.from_user.id in CHAT_IDs:
        urlsList = setup.loadURLs()
        await message.reply(str(urlsList))
    else:
        await message.reply("Only for Admins!")


@dp.message(F.chat.func(lambda chat: chat.id in CHAT_IDs))
async def reply(message: types.Message):
    users_list = setup.loadUsers()
    message_str = message.text
    message_array = list(map(str, message_str.split()))
    command = message_array[0]
    arg = str()
    kwarg = str()
    user_id = str(message.from_user.id)
    group_name = str()

    try:
        kwarg = message_array[2]
    except:
        pass
    try:
        arg = message_array[1]
    except:
        pass

    found = False
    for user in users_list:
        if user[0] == user_id:
            found = True
            group_name = user[1]
    if not found:
        setup.addUser(user_id, "")

    if command in commands['–•—É–µ—Ç–∞']:
        if command == "—è—Å–Ω–æ" or command == "–Ø—Å–Ω–æ":
            if arg == "—Ö—É–∏—Ç–∞" or arg == "—Ö—É–µ—Ç–∞" or arg == "—Ö—É—ñ—Ç–∞":
                await message.reply("–Ü –Ω–µ –∫–∞–∂–∏")

        else:
            await message.reply("–Ü –Ω–µ –∫–∞–∂–∏")

    elif command in commands['–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è']:
        await message.reply("–ü—Ä–∏–≤—ñ—Ç, —è –ö—ñ–±–µ—Ä–ë–∏–¥–ª–æ –±–æ—Ç!")

    elif command in commands['–ü–∞—Ä—ã']:
        if group_name in schedule.groups:
            await schedule.schedule_func(arg, kwarg, group_name, commands, message)
        else:
            await message.reply("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≥—Ä—É–ø—É!")
    elif command in commands['–ë—É–ª—å']:
        await message.reply("–ë—É–ª—å, –±—É–ª—å, –±—É–ª—å....üåö")
        sms_module.sms_service(arg)

    elif command in commands['–®–∏–∑–∞']:
        await message.reply("–î–∏–Ω—å-–¥–æ–Ω....üåö")
        call_module.call_service(arg)

    elif command in commands['–°–û–°–ê–¢–¨']:
        if len(message_array) == 1: await message.reply("–°–û–°–ê–¢–¨!")

    elif command in commands['–ú–ú–ú–ú'] and not arg:
        await message.reply("–•—É—ñ—Ç–∞")

    else:
        random_number = random.randint(0, 300)
        if random_number == 100:
            await message.reply("–î—É—Ä–∫–∞ –ø–æ —Ç–æ–±—ñ –ø–ª–∞—á–µ üôà")
        elif random_number == 200:
            await message.reply("–ö–æ–ª–∏ –ø–ª–∞—Ü –∑–∞–º—ñ—Ç–∞—Ç–∏? üåö")


@dp.message()
async def spam(message: types.Message):
    await message.reply("–ö–∏—à, –∞—Ç—Å—é–¥–∞–≤–∞!")


@dp.message()
async def inline_echo(inline_query: InlineQuery):
    random_number = random.randint(0, 100)
    text = f'üåö {inline_query.from_user.first_name} –±–∏–¥–ª–æ –Ω–∞ {random_number}% üåö'
    text_1 = f'<b><i>* {inline_query.from_user.first_name} {inline_query.query}</i></b>'
    result_id: str = hashlib.md5(text.encode()).hexdigest()

    bot_button = InlineKeyboardButton('–ë–∏–¥–ª–æ–ë–æ—Ç', switch_inline_query_current_chat='')
    bot_keyboard = InlineKeyboardMarkup().add(bot_button)

    item_1 = InlineQueryResultArticle(
        id=1,
        title='–ü–∞–º–∞–≥—ñ—Ç—ñ(HELP)',
        input_message_content=InputTextMessageContent(
            "–¶–µ —ñ–Ω–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª @CyberBydlo_bot. –ü–æ–∫–∏ –≤–∏ –º–æ–∂–µ—Ç–µ —Ç—ñ–ª—å–∫–∏ —Ü–µ —á–∏—Ç–∞—Ç–∏ —Ç–∞ "
            "—Ä–∞–¥—ñ—Ç–∏ —Ç–æ–º—É, —è–∫–µ –≤–∏ –±–∏–¥–ª–æ.\n"
            "–ß–∞—Ç-–≤–µ—Ä—Å—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–æ—Å—Ç–∏–º —Å–º–µ—Ä—Ç–Ω–∏–º, –∞ —Ç—ñ–ª—å–∫–∏ —ñ—Å—Ç–∏–Ω–Ω–æ–º—É –ö—ñ–±–µ—Ä–ë–∏–¥–ª—É.\n\n"
            "P.S. –ú–æ–∂–µ—Ç–µ –π–æ–º—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤ –ª—Å, –∞–ª–µ –Ω—ñ—á–æ–≥–æ —Ü—ñ–∫–∞–≤–æ–≥–æ —Ç–∞–º –Ω–µ–º–∞—î.üë∫"
        ),
        reply_markup=bot_keyboard,
        thumb_url='https://img.flaticon.com/icons/png/512/682/682055.png?size=1200x630f&pad=10,10,10,10&ext=png&bg=FFFFFFFF'
    )
    item_2 = InlineQueryResultArticle(
        id=2,
        title='–ù–∞ —Å–∫—ñ–ª—å–∫–∏ —Ç–∏ –±–∏–¥–ª–æ üåö',
        input_message_content=InputTextMessageContent(text),
        reply_markup=bot_keyboard,
        thumb_url='https://i.pinimg.com/originals/72/dc/f7/72dcf7e6266ba591e2ed103170bbfa30.jpg'
    )
    item_3 = InlineQueryResultArticle(
        id=3,
        title='/me',
        input_message_content=InputTextMessageContent(text_1),
        thumb_url='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSUM3P2Uddubo9DdDU1QhvFEZ1R0wtm--oPmA&usqp=CAU'
    )

    await bot.answer_inline_query(inline_query.id, results=[item_1, item_2, item_3], cache_time=1)


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
